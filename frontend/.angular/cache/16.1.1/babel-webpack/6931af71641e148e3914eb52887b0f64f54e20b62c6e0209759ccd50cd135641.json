{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./session.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(sessionService, router) {\n    this.sessionService = sessionService;\n    this.router = router;\n  }\n  canActivate() {\n    if (this.sessionService.isLoggedIn()) {\n      return true;\n    } else {\n      this.router.navigateByUrl('/login');\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.SessionService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","sessionService","router","canActivate","isLoggedIn","navigateByUrl","i0","ɵɵinject","i1","SessionService","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\salon\\angular-mysql-auth\\frontend\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { SessionService } from './session.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private sessionService: SessionService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.sessionService.isLoggedIn()) {\n      return true;\n    } else {\n      this.router.navigateByUrl('/login');\n      return false;\n    }\n  }\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;EAAW;EAE7EC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACF,cAAc,CAACG,UAAU,EAAE,EAAE;MACpC,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACF,MAAM,CAACG,aAAa,CAAC,QAAQ,CAAC;MACnC,OAAO,KAAK;;EAEhB;;AAXWN,SAAS,C;mBAATA,SAAS,EAAAO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAATZ,SAAS,C;SAATA,SAAS;EAAAa,OAAA,EAATb,SAAS,CAAAc,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}