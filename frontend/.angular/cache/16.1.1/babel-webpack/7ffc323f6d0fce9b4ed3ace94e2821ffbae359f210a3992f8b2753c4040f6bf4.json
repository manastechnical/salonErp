{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    // API base URL\n    // private baseUrl = 'https://nakodabackend.ngrok.app';\n    this.baseUrl = 'http://localhost:3002';\n  }\n  // Define your API methods here\n  signup(userData) {\n    const url = `${this.baseUrl}/signup`;\n    return this.http.post(url, userData).pipe(catchError(this.handleError));\n  }\n  login(credentials) {\n    const url = `${this.baseUrl}/login`;\n    return this.http.post(url, credentials).pipe(catchError(this.handleError));\n  }\n  getUserData(userId) {\n    const url = `${this.baseUrl}/api/user/${userId}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  // Handle HTTP errors\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Server-side error\n      errorMessage = error.status + ' - ' + error.error.message;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["throwError","catchError","ApiService","constructor","http","baseUrl","signup","userData","url","post","pipe","handleError","login","credentials","getUserData","userId","get","error","errorMessage","ErrorEvent","message","status","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\salon\\angular-mysql-auth\\frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n  })\n  export class ApiService {\n    \n    // API base URL\n   // private baseUrl = 'https://nakodabackend.ngrok.app';\n    private baseUrl = 'http://localhost:3002';\n\n    constructor(private http: HttpClient) { }\n    \n    // Define your API methods here\n\n    signup(userData: any): Observable<any> {\n        const url = `${this.baseUrl}/signup`;\n        return this.http.post<any>(url, userData)\n          .pipe(\n            catchError(this.handleError)\n          );\n      }\n      \n      login(credentials: any): Observable<any> {\n        const url = `${this.baseUrl}/login`;\n        return this.http.post<any>(url, credentials)\n          .pipe(\n            catchError(this.handleError)\n          );\n      }\n\n\n      getUserData(userId: string): Observable<any> {\n        const url = `${this.baseUrl}/api/user/${userId}`;\n        return this.http.get<any>(url)\n          .pipe(\n            catchError(this.handleError)\n          );\n      }\n\n      // Handle HTTP errors\n      private handleError(error: HttpErrorResponse): Observable<never> {\n        let errorMessage = 'An error occurred';\n        if (error.error instanceof ErrorEvent) {\n          // Client-side error\n          errorMessage = error.error.message;\n        } else {\n          // Server-side error\n          errorMessage = error.status + ' - ' + error.error.message;\n        }\n        console.error(errorMessage);\n        return throwError(errorMessage);\n      }\n      \n    \n  }\n  \n\n  "],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAKzC,OAAM,MAAOC,UAAU;EAMrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB;IACD;IACS,KAAAC,OAAO,GAAG,uBAAuB;EAED;EAExC;EAEAC,MAAMA,CAACC,QAAa;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,SAAS;IACpC,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAAMD,GAAG,EAAED,QAAQ,CAAC,CACtCG,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACL;EAEAC,KAAKA,CAACC,WAAgB;IACpB,MAAML,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,QAAQ;IACnC,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAAMD,GAAG,EAAEK,WAAW,CAAC,CACzCH,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACL;EAGAG,WAAWA,CAACC,MAAc;IACxB,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,aAAaU,MAAM,EAAE;IAChD,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAMR,GAAG,CAAC,CAC3BE,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACL;EAEA;EACQA,WAAWA,CAACM,KAAwB;IAC1C,IAAIC,YAAY,GAAG,mBAAmB;IACtC,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAGD,KAAK,CAACI,MAAM,GAAG,KAAK,GAAGJ,KAAK,CAACA,KAAK,CAACG,OAAO;;IAE3DE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOlB,UAAU,CAACkB,YAAY,CAAC;EACjC;;AA/CShB,UAAU,C;mBAAVA,UAAU,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAVxB,UAAU,C;SAAVA,UAAU;EAAAyB,OAAA,EAAVzB,UAAU,CAAA0B,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}